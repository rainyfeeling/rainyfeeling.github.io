<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress | 十八里坡－ 客栈]]></title>
  <link href="http://rainyfeeling.github.io/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://rainyfeeling.github.io/"/>
  <updated>2017-12-17T16:26:12+08:00</updated>
  <id>http://rainyfeeling.github.io/</id>
  <author>
    <name><![CDATA[十八]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress Tips]]></title>
    <link href="http://rainyfeeling.github.io/blog/2017/05/30/octopress-tips/"/>
    <updated>2017-05-30T10:34:53+08:00</updated>
    <id>http://rainyfeeling.github.io/blog/2017/05/30/octopress-tips</id>
    <content type="html"><![CDATA[<h2>写博客的基本流程</h2>

<p>首先运行octopress里面的<code>rake preview</code>和<code>rake watch</code>。查看log运行正常，下面的log就表示运行正常:
```sh
➜  octopress rake watch
Starting to watch source with Jekyll and Compass.</p>

<blockquote><blockquote><blockquote><p>Compass is watching for changes. Press Ctrl-C to Stop.</p></blockquote></blockquote></blockquote>

<p>Configuration file: /home/josh/work/blogger/octopress/_config.yml
            Source: source
       Destination: public
      Generating&hellip;
                    done.
 Auto-regeneration: enabled for &lsquo;source&rsquo;
    write public/stylesheets/screen.css
      Regenerating: 1 file(s) changed at 2017-06-11 10:20:43 &hellip;done in 0.44646012 seconds.
```</p>

<p>然后用浏览器打开<code>localhost:4000</code>，按<code>F5</code>刷新查看效果</p>

<p>现在可以用文本编辑器打开source目录下面的markdown文章开始编辑</p>

<p>编辑文章存盘的时候，一定要确认<code>rake watch</code>那边的log里出现
<code>
Regenerating: 1 file(s) changed at 2017-06-11 10:20:43 ...done in 0.44646012 seconds.
</code>
如果没有出现上面的log则表示octopress发现你的文章里面有错误，所以没有生成出新的博客。比如下面的例子表示出错:</p>

<pre><code>   Error: Pygments can't parse unknown language: &lt;/p&gt;.
   Error: Run jekyll build --trace for more information.
</code></pre>

<p>这个时候你需要重新编辑你的文章，修复错误。</p>

<h2>用jquery的镜像地址来提高网站访问速度</h2>

<p>因为原始地址是google的，所以中国这边完全访问不了，所以直接替换成比较快的镜像</p>

<p>打开octopress的根目录，编辑<code>source/_includes/head.html</code>，找到下面的代码行，将jquery的地址替换成code.jquery.com的地址:
<code>diff
-  &lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt;
+  &lt;script src="//code.jquery.com/jquery-1.9.1.min.js"&gt;&lt;/script&gt;
</code></p>

<h2>关闭tweet插件</h2>

<p>编辑配置文件<code>_config.yml</code>，将twitter_tweet_button的配置改成<code>false</code></p>

<h2>关于markdown格式的文档:</h2>

<ul>
<li><a href="https://help.github.com/articles/basic-writing-and-formatting-syntax/">https://help.github.com/articles/basic-writing-and-formatting-syntax/</a></li>
<li><a href="https://guides.github.com/features/mastering-markdown/">https://guides.github.com/features/mastering-markdown/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 14.04上安装Octopress]]></title>
    <link href="http://rainyfeeling.github.io/blog/2017/05/28/ubuntu-14-dot-04shang-an-zhuang-octopress/"/>
    <updated>2017-05-28T22:47:29+08:00</updated>
    <id>http://rainyfeeling.github.io/blog/2017/05/28/ubuntu-14-dot-04shang-an-zhuang-octopress</id>
    <content type="html"><![CDATA[<h2>1. 介绍</h2>

<p>octopress是基于Jekyll的静态博客系统。他有几个好处:</p>

<ul>
<li><p>兼容github page, 不用再申请博客空间了。直接用github的repository就可以。博客的结尾是<code>用户名.github.io</code></p></li>
<li><p>用户只需要编写markdown格式的文章，然后通过octopress生成网站内容</p></li>
<li>一条命令直接推送到github，简单方便。</li>
<li>通过git进行版本管理，不用担心内容丢失。</li>
</ul>


<!--more-->


<h3>基本知识</h3>

<ul>
<li><code>git</code> - 文件版本管理工具

<ul>
<li><code>git remote</code>: 远程服务器的别名</li>
<li>跟服务器的交互只有fetch, pull和push命令</li>
<li>平时都是在本地分支上面, checkout命令才会改变本地工作目录的文件内容</li>
</ul>
</li>
</ul>


<p><code>ruby</code>: 编程语言，octopress是用ruby开发的</p>

<p><code>gem</code>: 是ruby的一个库或者是应用。可以用gem命令来安装管理。安装完之后在命令行就直接可以运行了</p>

<pre><code class="sh"># 通过gem命令安装一个应用:bundle
$ gem install bundle  # 有时候需要sudo

# 安装完成后就可以直接执行bundle
$ bundle --version
Bundler version 1.15.0
</code></pre>

<p><code>bundle</code>: 基于gem的更加强大的包管理工具，可以安装批量的gem, 解决gem之间的依赖关系，而且还可以指定要安装的gem版本</p>

<p><code>Gemfile</code>: Gemfile里面包括批量的gem, 而且可以指定依赖关系和版本要求。
    <code>bundle install</code>读取当前目录的Gemfile来安装里面指定的gems</p>

<p><code>rake</code>: 一个ruby应用，通过gem可以安装，是ruby in rail里的组件。可以理解成linux里面的make</p>

<p><code>rakefile</code>: 很像makefile，指定rake执行的任务</p>

<h3>参考</h3>

<p>官方文档: <a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a>
虽然文档已经有些老了，但是过程还是简单明了的。</p>

<h2>2. 安装Octopress</h2>

<h3>环境</h3>

<p>Ubuntu 14.04
<code>sh
➜  octopress lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 14.04.5 LTS
Release:        14.04
Codename:       trusty
</code>
ruby版本1.9.3
<code>
➜  octopress ruby --version
ruby 1.9.3p484 (2013-11-22 revision 43786) [x86_64-linux]
</code></p>

<h3>步骤</h3>

<p>首先下载Octopress的源码
```
➜  git clone git://github.com/imathis/octopress.git
➜  cd octopress</p>

<h1>列出目录下所有文件</h1>

<p>➜  ls
CHANGELOG.markdown  config.rb  config.ru  _config.yml  Gemfile  plugins  Rakefile  README.markdown
<code>
目录下面有Gemfile，里面列出了Octopress需要安装的gem。需要用bundle安装
</code></p>

<h1>安装bundle, 如果已经安装了就可以略过这一步</h1>

<p>➜  gem install bundle</p>

<h1>根据Gemfile来安装相应的依赖。</h1>

<p>➜  bundle install</p>

<h1>NOTE: 我遇到了有一个插件要求ruby 2.0.0，但是我的版本是1.9.3。但是重新运行了几次就成功了？！</h1>

<pre><code>
## 3. 配置Octopress
运行rake命令安装默认的theme
</code></pre>

<h1>生成sass目录和source目录</h1>

<p>➜  rake install
<code>
设置github pages
</code>
➜  rake setup_github_pages</p>

<h1>需要输入你的github.io的URL, 比如我的就是<a href="https://github.com/rainyfeeling/rainyfeeling.github.io">https://github.com/rainyfeeling/rainyfeeling.github.io</a></h1>

<h1>成功之后会在目录下面生成一个_deploy目录，这个文件夹就静态网站的所有内容。现在里面就一个简单字符串</h1>

<pre><code>编辑`_config.yml`来更改博客的基本信息，像标题等等

## 4. 写博客文章
新建标题文章, 注意在zsh里面，所以`[`, `]`字符前面要加转义符`\`
</code></pre>

<p>rake new_post[&ldquo;Ubuntu 14.04上安装octopress&rdquo;]</p>

<h1>在 <em>source/</em>posts目录下生成了一个 .markdown 文件</h1>

<pre><code>用markdown编辑器修改文章，直到文章差不多完成，这时可以开始生成网站内容
</code></pre>

<h1>Generates posts and pages into the public directory</h1>

<p>rake generate</p>

<h1>运行一个本地server，便于调试</h1>

<p>rake preview    # Watches, and mounts a webserver at
```</p>

<p>打开浏览器，在地址栏里面输入<a href="http://localhost:4000">http://localhost:4000</a> 就可以看到网站的内容了</p>

<p>检查文章，标题还有各种配置是否正确，如果不正确的话可以继续修改markdown文件，然后用<code>rake generate</code>重新生成网站。同时刷新一下<code>http://localhost:4000</code>就可以看到效果了。</p>

<h2>5. 部署到github pages</h2>

<p>只需要运行<code>rake deploy</code>，然后输入github repo的用户名和密码，就直接将生成的网站内容推送到github网站了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World From Octopress]]></title>
    <link href="http://rainyfeeling.github.io/blog/2013/11/25/hello-world-from-octopress/"/>
    <updated>2013-11-25T21:19:57+08:00</updated>
    <id>http://rainyfeeling.github.io/blog/2013/11/25/hello-world-from-octopress</id>
    <content type="html"><![CDATA[<p>花了一个晚上的时间，终于把这个博客给搭建起来了。效果还是挺满意的。这个计划N久了的事情终于开始了，看来有Macbook就要开始折腾了。</p>

<p>整个过程没有想像的难，像有句话说的:&ldquo;只要开始动手，就已经成功一半"。
我是对照着Octopress的Getting start慢慢的看，然后一步一步的试，外加一点耐心。基本就搞定了。
整个过程中最慢的部分竟然是安装Octopress，此过程会安装很多ruby gem，经常会连接网站超时。
不过其他都还好。</p>

<p>Octopress是一个建立网站的框架。它可以完成配置，生成，预览网站。
部署的话需要一个外部的网站，比较简单就是像我一样，直接用github.io来部署。</p>

<p>总结一下，整个流程就是：</p>

<pre><code>1. 安装好Octopress (git, ruby, rake)
2. 建立一个github.io的repository来存放网站
3. 配置octopress，生成page, post.
4. 用rake来生成，预览网页。
5. 发布到github.io - 也就是push到github网站
6. 把octopress的配置也commit到本地git
</code></pre>

<p>接下来的事情是要：</p>

<pre><code>* 安装代码显示的插件
* 做几张好看的图片
* 熟悉Markdown的语法格式
* 多写写博客
</code></pre>
]]></content>
  </entry>
  
</feed>
