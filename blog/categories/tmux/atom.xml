<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tmux | 十八里坡－ 客栈]]></title>
  <link href="http://rainyfeeling.github.io/blog/categories/tmux/atom.xml" rel="self"/>
  <link href="http://rainyfeeling.github.io/"/>
  <updated>2018-01-20T23:53:33+08:00</updated>
  <id>http://rainyfeeling.github.io/</id>
  <author>
    <name><![CDATA[十八]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tmux高级部分]]></title>
    <link href="http://rainyfeeling.github.io/blog/2017/05/30/tmuxgao-ji-bu-fen/"/>
    <updated>2017-05-30T17:53:07+08:00</updated>
    <id>http://rainyfeeling.github.io/blog/2017/05/30/tmuxgao-ji-bu-fen</id>
    <content type="html"><![CDATA[<h2>0. 准备</h2>

<p>为了更好的理解session和window，我们再次回顾一下前面一篇文章里面的基本用法</p>

<ul>
<li>首先，确认你没有打开任何tmux窗口。如果打开了，请在打开的tmux打开的所有窗口里面执行<code>exit</code>命令，保证我们退出了所有tmux窗口。</li>
<li>接下来按快捷键<code>CTRL+ALT+t</code>打开一个terminal，然后执行<code>tmux</code>创建一个session</li>
<li>按<code>CTRL+b, %</code>在当前窗口水平分屏，创建一个新的pane</li>
<li>按<code>CTRL+b, "</code>在当前窗口垂直分屏，创建一个新的pane</li>
<li>按<code>CTRL+b, c(reate)</code>创建新的窗口</li>
</ul>


<h2>1. session</h2>

<p>这时我们运行下面的命令来列出当前的session信息</p>

<pre><code class="sh"># 列出所有的session
$ tmux ls
0: 2 windows (created Tue May 30 17:23:49 2017) [80x23] (attached)
</code></pre>

<ul>
<li>我们分析一下输出信息:

<ul>
<li>一行就是现在有一个session</li>
<li>在<code>:</code>前面的字串是这个session的名字。也就是<code>0</code></li>
<li>这个session有2个窗口</li>
<li>后面有这个session创建的时间，和窗口的大小</li>
<li><code>(attached)</code> : 表示这个session现在运行在前台。是可以看得到的。</li>
</ul>
</li>
</ul>


<!--more-->


<p>接下来，我们运行一条脚本，每一秒钟打印一个信息，而且不会停止。(只有按<code>CTRL+c</code>才能停止这条脚本)
<code>
$ while true; do echo `date`; sleep 1; done
2017年 05月 30日 星期二 18:03:09 CST
2017年 05月 30日 星期二 18:03:10 CST
2017年 05月 30日 星期二 18:03:11 CST
2017年 05月 30日 星期二 18:03:12 CST
2017年 05月 30日 星期二 18:03:13 CST
2017年 05月 30日 星期二 18:03:14 CST
2017年 05月 30日 星期二 18:03:15 CST
2017年 05月 30日 星期二 18:03:16 CST
2017年 05月 30日 星期二 18:03:17 CST
... ...
</code></p>

<p>现在按下快捷键<code>CTRL+b, d</code>来做detach的动作。也就是让tmux的session运行在后台状态。</p>

<p>按完发现命令行的log如下:
```sh
$ tmux
[detached]</p>

<pre><code>而且tmux的状态栏也不见了。再运行session查看命令:
</code></pre>

<p>$ tmux ls
0: 2 windows (created Tue May 30 17:23:49 2017) [80x23]
<code>``
后面的</code>(attached)<code>不见了。这个就是说明当前有一个session, 名字是</code>0`，包含2个窗口。而且现在运行在后台。</p>

<p>接下来，我们运行attach命令，将这个session带到前台, 这里我们用到了<code>-t</code>参数，表target的意思。</p>

<pre><code># tmux attach到名字为0的session
tmux attach -t 0
</code></pre>

<p>运行完命令发现tmux又回来了，而且可以发现这条打印时间的命令一直在后台运行，detach不会影响它的执行。
<code>
$ while true; do echo `date`; sleep 1; done
2017年 05月 30日 星期二 18:03:09 CST
2017年 05月 30日 星期二 18:08:10 CST
2017年 05月 30日 星期二 18:08:11 CST
2017年 05月 30日 星期二 18:08:12 CST
2017年 05月 30日 星期二 18:08:13 CST
2017年 05月 30日 星期二 18:08:14 CST
2017年 05月 30日 星期二 18:08:15 CST
2017年 05月 30日 星期二 18:08:16 CST
2017年 05月 30日 星期二 18:08:17 CST
2017年 05月 30日 星期二 18:08:18 CST
2017年 05月 30日 星期二 18:08:19 CST
2017年 05月 30日 星期二 18:08:20 CST
2017年 05月 30日 星期二 18:08:21 CST
2017年 05月 30日 星期二 18:08:22 CST
2017年 05月 30日 星期二 18:08:23 CST
2017年 05月 30日 星期二 18:08:24 CST
2017年 05月 30日 星期二 18:08:25 CST
2017年 05月 30日 星期二 18:08:26 CST
2017年 05月 30日 星期二 18:08:27 CST
2017年 05月 30日 星期二 18:08:28 CST
2017年 05月 30日 星期二 18:08:29 CST
2017年 05月 30日 星期二 18:08:30 CST
</code></p>

<p>好，现在可以按<code>CTRL+c</code>来停止打印时间的脚本。</p>

<h2>2. window (窗口)</h2>

<p>运行下面的tmux命令列出所有的窗口信息
<code>sh
$ tmux list-windows
0: ~- (3 panes) [80x23] [layout 837a,80x23,0,0{40x23,0,0,0,39x23,41,0[39x11,41,0,1,39x11,41,12,2]}] @0
1: tmux* (1 panes) [80x23] [layout ae60,80x23,0,0,3] @1 (active)
</code></p>

<p>我们分析一下输出信息:</p>

<ul>
<li>一行就是现在有一个窗口, 窗口里面可以有多个pane。当前session有两个窗口，其中一个窗口有3个pane。另外一个窗口只有1个pane</li>
<li>在<code>:</code>前面的数字是这个窗口的id。可以通过按<code>CTRL+b, 数字</code>开切换当前窗口</li>
<li><code>(active)</code> : 表示当前窗口是1</li>
</ul>


<h2>3. 一些结论</h2>

<ul>
<li>tmux session可以包含一系列窗口，窗口可以包含多个pane

<ul>
<li><code>tmux ls</code>: 可以列出当前所有的session的信息，包括前台的(attached)和后台的(detached)</li>
</ul>
</li>
<li>首先创建session，然后才能创建窗口</li>
<li>运行<code>tmux</code>命令就是创建一个session，同时这个session只有一个窗口</li>
<li>在tmux的当前session里，可以按<code>CTRL+b, d</code>来做detach，使其运行在后台</li>
<li>session在后台也还是运行状态</li>
<li>tmux 可以用attach命令将某个session运行在前台

<ul>
<li><code>tmux attach -t &lt;session name&gt;</code></li>
</ul>
</li>
<li>只能有一个前台session</li>
<li>因为session里面是运行着的任务，所以在系统重启之后，这些运行着的任务会全部清除</li>
</ul>


<h2>4. tmux脚本化</h2>

<p>通过tmux的命令可以做一些订制和自动化。比如:</p>

<ul>
<li>可以让tmux创建一个session，里面可以创建几个运行的任务。</li>
<li>可以让tmux自动创建几个窗口，每个窗口都在不同的路径下</li>
</ul>


<h3>a) 关于session的命令行参数</h3>

<ul>
<li><code>new-session</code>: 创建新的session

<ul>
<li><code>-s 名字</code>: 指定创建session的名字</li>
<li><code>-d</code>: 表示创建一个在后台的session。只能用<code>tmux ls</code>才能看得到。</li>
<li><code>"shell命令"</code>: 可以在后面跟一系列的shell命令,要用单引号或者双引号括起来。</li>
<li>实例:</li>
</ul>
</li>
</ul>


<pre><code class="sh"># 创建一个新的session，名字叫做octopress。
# 同时在这个session里面执行命令: cd ~/work/blogger/octopress; rake preview
tmux new-session -s octopress 'cd ~/work/blogger/octopress; rake preview'
</code></pre>

<ul>
<li><code>attach</code>: 把后台的session运行到前台

<ul>
<li><code>-t 名字</code>: 指定target session的名字</li>
<li>实例:</li>
</ul>
</li>
</ul>


<pre><code class="sh"># 这条命令跟上面基本一样，只是多了-d参数，表示创建的session是在后台，只能用tmux ls才能看到
tmux new-session -s octopress -d 'cd ~/work/blogger/octopress; rake preview'

# 将上面的创建的后台session变成前台
tmux attach -t octopress
</code></pre>

<h3>b) 关于窗口的命令行参数 (窗口的命令必须在tmux的session当中才能开始运行)</h3>

<ul>
<li><code>new-window</code>: 创建新的窗口

<ul>
<li><code>-c 目录名</code>: 表示到某个目录下。举例: <code>tmux new-window -c ~/work</code>表示打开一个新窗口，并且新窗口的目录为<code>~/work</code>。然后切换当前窗口到新建窗口。</li>
<li><code>-d</code>: 表示执行命令后，不要改变当前窗口。举例: <code>tmux new-window -c ~/work -d</code> 基本跟上面的命令一样，唯一的区别是，不要切换当前窗口到新窗口。</li>
<li><code>"shell命令"</code>: 在窗口里执行的命令, 要用单引号或者双引号括起来。

<ul>
<li>注意: 如果命令是当场返回的话，则窗口在命令返回时就会退出。所以看起来没有效果。</li>
</ul>
</li>
<li>实例:</li>
</ul>
</li>
</ul>


<pre><code class="sh"># 创建一个tmux session
tmux

# 在当前session里面创建一个新窗口，路径是~/work/blogger/octopress，同时执行yes命令
tmux new-window -c ~/work/blogger/octopress 'yes'

# 在当前session里面创建一个新窗口, 运行yes命令，同时不要切换到那个窗口
tmux new-window -d -c ~/work/blogger/octopress 'yes'
</code></pre>

<ul>
<li><p><code>split-window</code>: 在当前窗口里创建一个pane</p></li>
<li><p>tmux的窗口和session命令可以连着用，但是中间要用<code>\;</code>隔开。实例:</p></li>
</ul>


<pre><code class="sh"># 创建一个名字叫做octopress的新session。在默认窗口里执行rake preview命令。同时在创建一个pane。里面执行rake watch命令。最后在新建一个新窗口
tmux new-session -s octopress 'cd ~/work/blogger/octopress; rake preview' \; split-window 'cd ~/work/blogger/octopress;rake watch' \; new-window

# 创建两个新窗口打开不同的路径
tmux new-window -c ~/work \; new-window -c ~/work/blogger
</code></pre>

<h2>5. 脚本实例</h2>

<h3>我自己的octopress博客的自动化tmux脚本</h3>

<pre><code class="sh">#!/bin/bash

OCTOPRESS_PATH="/home/josh/work/blogger/octopress"

# create a tmux session, which running the octopress with preview and watch
tmux new-session -s octopress -d "cd ${OCTOPRESS_PATH}; rake preview" \;\
     split-window             -d "cd ${OCTOPRESS_PATH}; rake watch" \;  \
     new-window -c ${OCTOPRESS_PATH}/_deploy \;             \
     new-window -c ${OCTOPRESS_PATH}

# open local server
opera http://localhost:4000 &amp;

# open sublime edit the posts
subl $OCTOPRESS_PATH/source/_posts/2017*.markdown

tmux attach -t octopress
</code></pre>

<h3>有人写了一个tmux session的保存和读取的脚本。大家可以参考一下</h3>

<ul>
<li><a href="https://github.com/mislav/dotfiles/blob/d2af5900fce38238d1202aa43e7332b20add6205/bin/tmux-session">此脚本</a>可以在系统重启之后，restore整个session。但是仔细看代码可以发现，restore的session只是把每个窗口所在的目录记录下来而已。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tmux简明介绍]]></title>
    <link href="http://rainyfeeling.github.io/blog/2017/05/30/tmuxjian-ming-jie-shao/"/>
    <updated>2017-05-30T14:42:20+08:00</updated>
    <id>http://rainyfeeling.github.io/blog/2017/05/30/tmuxjian-ming-jie-shao</id>
    <content type="html"><![CDATA[<h2>tmux介绍</h2>

<p>tmux是一个多窗口终端工具，可以同时在多个终端(窗口)来回切换。而且还可以管理各个窗口，在窗口里面分屏等等。</p>

<p>tmux里面的基本概念有: session, window和pane</p>

<p>比如执行tmux命令，就产生产一个新的session。如果这时再执行创建窗口操作<code>CTRL+b, c</code>, 就会创建一个新window，这个window是属于当前session的。
再执行分屏操作<code>CTRL+b, %</code>就新建了一个pane。</p>

<p>所以基本就是一个session可以包含很多window(窗口),  一个window(窗口)又可以包含多个pane。</p>

<!--more-->


<h3>快捷键说明</h3>

<ul>
<li><code>CTRL+b</code>表示按住<code>CTRL</code>键不动，然后按<code>b</code></li>
<li><code>CTRL+b, c</code>表示按住<code>CTRL</code>键不动，然后按<code>b</code>, 然后松开<code>CTRL</code>和<code>b</code>键。再按下<code>c</code>键</li>
<li><code>CTRL+b, l(ast)</code>表示<code>CTRL+b, l</code>。加单词在这里是怕用户把字母<code>l</code>看成是数字<code>1</code>, 另外可以让大家更加容易记住快捷键的意义。</li>
</ul>


<h3>环境</h3>

<p>Ubuntu 14.04</p>

<p>tmux用的是默认配置, 没有做任何修改。也就说tmux的快捷键是<code>CTRL+b</code></p>

<h2>基本用法</h2>

<p>在Ubuntu下面可以用快捷键<code>CTRL+ALT+t</code>打开一个terminal</p>

<p>如果没有安装tmux的话可以运行<code>sudo apt-get install tmux</code>来进行安装。</p>

<p>运行<code>tmux</code>命令, 可以看到最底下已经有一条绿色的状态栏，表示终端现在正在一个tmux的session里面。</p>

<h3>创建窗口和pane</h3>

<ul>
<li>按<code>CTRL+b, %</code>在当前窗口水平分屏，创建一个新的pane</li>
<li>按<code>CTRL+b, "</code>在当前窗口垂直分屏，创建一个新的pane</li>
<li>按<code>CTRL+b, c(reate)</code>创建新的窗口</li>
</ul>


<p>现在你的终端应该长的下图一样:
<img src="/images/tmux_example.png" alt="tmux_example.png" /></p>

<ul>
<li>图片说明:

<ul>
<li><code>[0]</code> 表示session的名称是<code>0</code></li>
<li><code>0:~</code> 表示窗口编号是<code>0</code>, 名称是<code>~</code>，其实就是当前目录</li>
<li><code>1:~*</code>表示窗口编号是<code>1</code>, 名称是<code>~</code>。也就是当前目录名。<code>*</code>表示这个窗口是当前窗口</li>
</ul>
</li>
</ul>


<h3>窗口切换</h3>

<ul>
<li><code>CTRL+b, 数字</code>，数字是窗口的编号，从0开始往后累加。最大只能是9。</li>
<li><code>CTRL+b, n(ext)</code>，表示切换到当前窗口编号+1的窗口。</li>
<li><code>CTRL+b, p(revious)</code>，表示切换到当前窗口编号-1的窗口。</li>
<li><code>CTRL+b, l(ast)</code>，表示切换到上一次(last)切换的窗口。</li>
</ul>


<h3>pane的切换</h3>

<ul>
<li><code>CTRL+b, o(ther)</code>, 这里只能是一个pane，一个pane的切换</li>
<li><code>CTRL+b, 箭头</code>，这时可以上下左右的切换。</li>
</ul>


<h3>退出窗口或者pane</h3>

<p>在tmux的窗口或者命令行，输入<code>exit</code>命令就可以退出当前窗口或者pane。</p>

<h3>历史记录浏览</h3>

<p>如果在窗口或者pane里，想往上翻页查询历史记录，那应该怎么办呢？</p>

<ul>
<li>这时我们需要进入复制模式

<ul>
<li>按<code>CTRL+b, [</code>进入复制模式。可以看到右上角显示一个黄色高亮块，表示当前正在复制模式。</li>
<li>按<code>PAGE-UP</code> <code>PAGE-DOWN</code>和上下左右箭头进行浏览</li>
<li>按两次<code>ESC</code>键退出复制模式, 恢复正常模式。(默认使用Emacs的按键方案)

<ul>
<li>如果使用vi按键方案，在复制模式下，只要按回车键就可以退出复制模式。(下面讲解怎么配置成vi按键方案)</li>
</ul>
</li>
</ul>
</li>
</ul>


<p><p /></p>

<ul>
<li>如果你习惯用vi的话，我们可以把复制模式里面的按键配置成vi样式

<ul>
<li>打开<code>~/.tmux.conf</code>文件，如果没有的话就直接创建。</li>
<li>加入代码
<code>
set-window-option -g mode-keys vi
</code></li>
<li>配置完成之后，需要退出tmux</li>
<li>这样配置以后, 退出复制模式的快捷键变成了回车键。</li>
<li>而且你可以在复制模式用<code>h</code>, <code>i</code>, <code>j</code>, <code>k</code>进行翻页，还可以用<code>G</code>, <code>gg</code>等等进行浏览。</li>
</ul>
</li>
</ul>


<p>至此，你已经学会基本的tmux功能，这样可以帮助你在命令行下面更加高效。</p>
]]></content>
  </entry>
  
</feed>
