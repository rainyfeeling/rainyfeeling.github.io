<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[十八里坡－ 客栈]]></title>
  <link href="http://rainyfeeling.github.io/atom.xml" rel="self"/>
  <link href="http://rainyfeeling.github.io/"/>
  <updated>2017-07-25T23:48:42+08:00</updated>
  <id>http://rainyfeeling.github.io/</id>
  <author>
    <name><![CDATA[十八]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[羽毛球小球技巧]]></title>
    <link href="http://rainyfeeling.github.io/blog/2017/07/25/yu-mao-qiu-xiao-qiu-ji-qiao/"/>
    <updated>2017-07-25T23:29:40+08:00</updated>
    <id>http://rainyfeeling.github.io/blog/2017/07/25/yu-mao-qiu-xiao-qiu-ji-qiao</id>
    <content type="html"><![CDATA[<p><em>小球技巧:</em></p>

<ul>
<li>上半身稳定，接球时不要有顿挫，不要急。接球时重心在前。上半身稳定是接小球稳定的前提。</li>
<li>以左脚为轴移动。做走动的步伐，而不是跑动的或者跳动的步伐。步伐要求放松，从容，争取走到往前。接球后，不要大幅回收(双打不需要)</li>
<li>双手平抬。持拍手伸直，手腕放松，高过网。</li>
<li>球拍指向球网，并与手腕有个向下30度的夹角</li>
<li>正手接球时，无名指和小指握紧球拍。</li>
<li>准备接球时，双手举高，这样直接就可以做出接小球动作。</li>
</ul>


<p><em>进阶:</em></p>

<ul>
<li><p>变化：接小球的同样的动作，在接球瞬间可以变化:</p>

<ol>
<li>接对角: 球拍对着网，然后手像扭螺丝一样扭转90度。</li>
<li>变平推: 球拍对着网，手腕转过来，变成手腕向上，然后平推
<p></p></li>
</ol>
</li>
<li><p>策略：接小球之后是要将对手变成被动方。所以在对方回球时，我方有几种策略：</p>

<ol>
<li>直接网前扑球</li>
<li>接对角</li>
</ol>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tmux高级部分]]></title>
    <link href="http://rainyfeeling.github.io/blog/2017/05/30/tmuxgao-ji-bu-fen/"/>
    <updated>2017-05-30T17:53:07+08:00</updated>
    <id>http://rainyfeeling.github.io/blog/2017/05/30/tmuxgao-ji-bu-fen</id>
    <content type="html"><![CDATA[<h2>0. 准备</h2>

<p>为了更好的理解session和window，我们再次回顾一下前面一篇文章里面的基本用法</p>

<ul>
<li>首先，确认你没有打开任何tmux窗口。如果打开了，请在打开的tmux打开的所有窗口里面执行<code>exit</code>命令，保证我们退出了所有tmux窗口。</li>
<li>接下来按快捷键<code>CTRL+ALT+t</code>打开一个terminal，然后执行<code>tmux</code>创建一个session</li>
<li>按<code>CTRL+b, %</code>在当前窗口水平分屏，创建一个新的pane</li>
<li>按<code>CTRL+b, "</code>在当前窗口垂直分屏，创建一个新的pane</li>
<li>按<code>CTRL+b, c(reate)</code>创建新的窗口</li>
</ul>


<h2>1. session</h2>

<p>这时我们运行下面的命令来列出当前的session信息</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 列出所有的session</span>
</span><span class='line'><span class="nv">$ </span>tmux ls
</span><span class='line'>0: <span class="m">2</span> windows <span class="o">(</span>created Tue May <span class="m">30</span> 17:23:49 2017<span class="o">)</span> <span class="o">[</span>80x23<span class="o">]</span> <span class="o">(</span>attached<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>我们分析一下输出信息:

<ul>
<li>一行就是现在有一个session</li>
<li>在<code>:</code>前面的字串是这个session的名字。也就是<code>0</code></li>
<li>这个session有2个窗口</li>
<li>后面有这个session创建的时间，和窗口的大小</li>
<li><code>(attached)</code> : 表示这个session现在运行在前台。是可以看得到的。</li>
</ul>
</li>
</ul>


<!--more-->


<p>接下来，我们运行一条脚本，每一秒钟打印一个信息，而且不会停止。(只有按<code>CTRL+c</code>才能停止这条脚本)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="k">while</span> <span class="nb">true</span><span class="p">;</span> <span class="k">do</span> <span class="nb">echo</span> <span class="sb">`</span>date<span class="sb">`</span><span class="p">;</span> sleep 1<span class="p">;</span> <span class="k">done</span>
</span><span class='line'>2017年 05月 30日 星期二 18:03:09 CST
</span><span class='line'>2017年 05月 30日 星期二 18:03:10 CST
</span><span class='line'>2017年 05月 30日 星期二 18:03:11 CST
</span><span class='line'>2017年 05月 30日 星期二 18:03:12 CST
</span><span class='line'>2017年 05月 30日 星期二 18:03:13 CST
</span><span class='line'>2017年 05月 30日 星期二 18:03:14 CST
</span><span class='line'>2017年 05月 30日 星期二 18:03:15 CST
</span><span class='line'>2017年 05月 30日 星期二 18:03:16 CST
</span><span class='line'>2017年 05月 30日 星期二 18:03:17 CST
</span><span class='line'>... ...
</span></code></pre></td></tr></table></div></figure>


<p>现在按下快捷键<code>CTRL+b, d</code>来做detach的动作。也就是让tmux的session运行在后台状态。</p>

<p>按完发现命令行的log如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>tmux
</span><span class='line'><span class="o">[</span>detached<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>而且tmux的状态栏也不见了。再运行session查看命令:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>tmux ls
</span><span class='line'>0: <span class="m">2</span> windows <span class="o">(</span>created Tue May <span class="m">30</span> 17:23:49 2017<span class="o">)</span> <span class="o">[</span>80x23<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>后面的<code>(attached)</code>不见了。这个就是说明当前有一个session, 名字是<code>0</code>，包含2个窗口。而且现在运行在后台。</p>

<p>接下来，我们运行attach命令，将这个session带到前台, 这里我们用到了<code>-t</code>参数，表target的意思。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># tmux attach到名字为0的session</span>
</span><span class='line'>tmux attach -t 0
</span></code></pre></td></tr></table></div></figure>


<p>运行完命令发现tmux又回来了，而且可以发现这条打印时间的命令一直在后台运行，detach不会影响它的执行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="k">while</span> <span class="nb">true</span><span class="p">;</span> <span class="k">do</span> <span class="nb">echo</span> <span class="sb">`</span>date<span class="sb">`</span><span class="p">;</span> sleep 1<span class="p">;</span> <span class="k">done</span>
</span><span class='line'>2017年 05月 30日 星期二 18:03:09 CST
</span><span class='line'>2017年 05月 30日 星期二 18:08:10 CST
</span><span class='line'>2017年 05月 30日 星期二 18:08:11 CST
</span><span class='line'>2017年 05月 30日 星期二 18:08:12 CST
</span><span class='line'>2017年 05月 30日 星期二 18:08:13 CST
</span><span class='line'>2017年 05月 30日 星期二 18:08:14 CST
</span><span class='line'>2017年 05月 30日 星期二 18:08:15 CST
</span><span class='line'>2017年 05月 30日 星期二 18:08:16 CST
</span><span class='line'>2017年 05月 30日 星期二 18:08:17 CST
</span><span class='line'>2017年 05月 30日 星期二 18:08:18 CST
</span><span class='line'>2017年 05月 30日 星期二 18:08:19 CST
</span><span class='line'>2017年 05月 30日 星期二 18:08:20 CST
</span><span class='line'>2017年 05月 30日 星期二 18:08:21 CST
</span><span class='line'>2017年 05月 30日 星期二 18:08:22 CST
</span><span class='line'>2017年 05月 30日 星期二 18:08:23 CST
</span><span class='line'>2017年 05月 30日 星期二 18:08:24 CST
</span><span class='line'>2017年 05月 30日 星期二 18:08:25 CST
</span><span class='line'>2017年 05月 30日 星期二 18:08:26 CST
</span><span class='line'>2017年 05月 30日 星期二 18:08:27 CST
</span><span class='line'>2017年 05月 30日 星期二 18:08:28 CST
</span><span class='line'>2017年 05月 30日 星期二 18:08:29 CST
</span><span class='line'>2017年 05月 30日 星期二 18:08:30 CST
</span></code></pre></td></tr></table></div></figure>


<p>好，现在可以按<code>CTRL+c</code>来停止打印时间的脚本。</p>

<h2>2. window (窗口)</h2>

<p>运行下面的tmux命令列出所有的窗口信息</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>tmux list-windows
</span><span class='line'>0: ~- <span class="o">(</span><span class="m">3</span> panes<span class="o">)</span> <span class="o">[</span>80x23<span class="o">]</span> <span class="o">[</span>layout 837a,80x23,0,0<span class="o">{</span>40x23,0,0,0,39x23,41,0<span class="o">[</span>39x11,41,0,1,39x11,41,12,2<span class="o">]}]</span> @0
</span><span class='line'>1: tmux* <span class="o">(</span><span class="m">1</span> panes<span class="o">)</span> <span class="o">[</span>80x23<span class="o">]</span> <span class="o">[</span>layout ae60,80x23,0,0,3<span class="o">]</span> @1 <span class="o">(</span>active<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们分析一下输出信息:</p>

<ul>
<li>一行就是现在有一个窗口, 窗口里面可以有多个pane。当前session有两个窗口，其中一个窗口有3个pane。另外一个窗口只有1个pane</li>
<li>在<code>:</code>前面的数字是这个窗口的id。可以通过按<code>CTRL+b, 数字</code>开切换当前窗口</li>
<li><code>(active)</code> : 表示当前窗口是1</li>
</ul>


<h2>3. 一些结论</h2>

<ul>
<li>tmux session可以包含一系列窗口，窗口可以包含多个pane

<ul>
<li><code>tmux ls</code>: 可以列出当前所有的session的信息，包括前台的(attached)和后台的(detached)</li>
</ul>
</li>
<li>首先创建session，然后才能创建窗口</li>
<li>运行<code>tmux</code>命令就是创建一个session，同时这个session只有一个窗口</li>
<li>在tmux的当前session里，可以按<code>CTRL+b, d</code>来做detach，使其运行在后台</li>
<li>session在后台也还是运行状态</li>
<li>tmux 可以用attach命令将某个session运行在前台

<ul>
<li><code>tmux attach -t &lt;session name&gt;</code></li>
</ul>
</li>
<li>只能有一个前台session</li>
<li>因为session里面是运行着的任务，所以在系统重启之后，这些运行着的任务会全部清除</li>
</ul>


<h2>4. tmux脚本化</h2>

<p>通过tmux的命令可以做一些订制和自动化。比如:</p>

<ul>
<li>可以让tmux创建一个session，里面可以创建几个运行的任务。</li>
<li>可以让tmux自动创建几个窗口，每个窗口都在不同的路径下</li>
</ul>


<h3>a) 关于session的命令行参数</h3>

<ul>
<li><code>new-session</code>: 创建新的session

<ul>
<li><code>-s 名字</code>: 指定创建session的名字</li>
<li><code>-d</code>: 表示创建一个在后台的session。只能用<code>tmux ls</code>才能看得到。</li>
<li><code>"shell命令"</code>: 可以在后面跟一系列的shell命令,要用单引号或者双引号括起来。</li>
<li>实例:</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 创建一个新的session，名字叫做octopress。</span>
</span><span class='line'><span class="c"># 同时在这个session里面执行命令: cd ~/work/blogger/octopress; rake preview</span>
</span><span class='line'>tmux new-session -s octopress <span class="s1">&#39;cd ~/work/blogger/octopress; rake preview&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>attach</code>: 把后台的session运行到前台

<ul>
<li><code>-t 名字</code>: 指定target session的名字</li>
<li>实例:</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 这条命令跟上面基本一样，只是多了-d参数，表示创建的session是在后台，只能用tmux ls才能看到</span>
</span><span class='line'>tmux new-session -s octopress -d <span class="s1">&#39;cd ~/work/blogger/octopress; rake preview&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 将上面的创建的后台session变成前台</span>
</span><span class='line'>tmux attach -t octopress
</span></code></pre></td></tr></table></div></figure>


<h3>b) 关于窗口的命令行参数 (窗口的命令必须在tmux的session当中才能开始运行)</h3>

<ul>
<li><code>new-window</code>: 创建新的窗口

<ul>
<li><code>-c 目录名</code>: 表示到某个目录下。举例: <code>tmux new-window -c ~/work</code>表示打开一个新窗口，并且新窗口的目录为<code>~/work</code>。然后切换当前窗口到新建窗口。</li>
<li><code>-d</code>: 表示执行命令后，不要改变当前窗口。举例: <code>tmux new-window -c ~/work -d</code> 基本跟上面的命令一样，唯一的区别是，不要切换当前窗口到新窗口。</li>
<li><code>"shell命令"</code>: 在窗口里执行的命令, 要用单引号或者双引号括起来。

<ul>
<li>注意: 如果命令是当场返回的话，则窗口在命令返回时就会退出。所以看起来没有效果。</li>
</ul>
</li>
<li>实例:</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 创建一个tmux session</span>
</span><span class='line'>tmux
</span><span class='line'>
</span><span class='line'><span class="c"># 在当前session里面创建一个新窗口，路径是~/work/blogger/octopress，同时执行yes命令</span>
</span><span class='line'>tmux new-window -c ~/work/blogger/octopress <span class="s1">&#39;yes&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 在当前session里面创建一个新窗口, 运行yes命令，同时不要切换到那个窗口</span>
</span><span class='line'>tmux new-window -d -c ~/work/blogger/octopress <span class="s1">&#39;yes&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><code>split-window</code>: 在当前窗口里创建一个pane</p></li>
<li><p>tmux的窗口和session命令可以连着用，但是中间要用<code>\;</code>隔开。实例:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 创建一个名字叫做octopress的新session。在默认窗口里执行rake preview命令。同时在创建一个pane。里面执行rake watch命令。最后在新建一个新窗口</span>
</span><span class='line'>tmux new-session -s octopress <span class="s1">&#39;cd ~/work/blogger/octopress; rake preview&#39;</span> <span class="se">\;</span> split-window <span class="s1">&#39;cd ~/work/blogger/octopress;rake watch&#39;</span> <span class="se">\;</span> new-window
</span><span class='line'>
</span><span class='line'><span class="c"># 创建两个新窗口打开不同的路径</span>
</span><span class='line'>tmux new-window -c ~/work <span class="se">\;</span> new-window -c ~/work/blogger
</span></code></pre></td></tr></table></div></figure>


<h2>5. 脚本实例</h2>

<h3>我自己的octopress博客的自动化tmux脚本</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">OCTOPRESS_PATH</span><span class="o">=</span><span class="s2">&quot;/home/josh/work/blogger/octopress&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># create a tmux session, which running the octopress with preview and watch</span>
</span><span class='line'>tmux new-session -s octopress -d <span class="s2">&quot;cd ${OCTOPRESS_PATH}; rake preview&quot;</span> <span class="se">\;\</span>
</span><span class='line'>     split-window             -d <span class="s2">&quot;cd ${OCTOPRESS_PATH}; rake watch&quot;</span> <span class="se">\;</span>  <span class="se">\</span>
</span><span class='line'>     new-window -c <span class="k">${</span><span class="nv">OCTOPRESS_PATH</span><span class="k">}</span>/_deploy <span class="se">\;</span>             <span class="se">\</span>
</span><span class='line'>     new-window -c <span class="k">${</span><span class="nv">OCTOPRESS_PATH</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># open local server</span>
</span><span class='line'>opera http://localhost:4000 <span class="p">&amp;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># open sublime edit the posts</span>
</span><span class='line'>subl <span class="nv">$OCTOPRESS_PATH</span>/source/_posts/2017*.markdown
</span><span class='line'>
</span><span class='line'>tmux attach -t octopress
</span></code></pre></td></tr></table></div></figure>


<h3>有人写了一个tmux session的保存和读取的脚本。大家可以参考一下</h3>

<ul>
<li><a href="https://github.com/mislav/dotfiles/blob/d2af5900fce38238d1202aa43e7332b20add6205/bin/tmux-session">此脚本</a>可以在系统重启之后，restore整个session。但是仔细看代码可以发现，restore的session只是把每个窗口所在的目录记录下来而已。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tmux简明介绍]]></title>
    <link href="http://rainyfeeling.github.io/blog/2017/05/30/tmuxjian-ming-jie-shao/"/>
    <updated>2017-05-30T14:42:20+08:00</updated>
    <id>http://rainyfeeling.github.io/blog/2017/05/30/tmuxjian-ming-jie-shao</id>
    <content type="html"><![CDATA[<h2>tmux介绍</h2>

<p>tmux是一个多窗口终端工具，可以同时在多个终端(窗口)来回切换。而且还可以管理各个窗口，在窗口里面分屏等等。</p>

<p>tmux里面的基本概念有: session, window和pane</p>

<p>比如执行tmux命令，就产生产一个新的session。如果这时再执行创建窗口操作<code>CTRL+b, c</code>, 就会创建一个新window，这个window是属于当前session的。
再执行分屏操作<code>CTRL+b, %</code>就新建了一个pane。</p>

<p>所以基本就是一个session可以包含很多window(窗口),  一个window(窗口)又可以包含多个pane。</p>

<!--more-->


<h3>快捷键说明</h3>

<ul>
<li><code>CTRL+b</code>表示按住<code>CTRL</code>键不动，然后按<code>b</code></li>
<li><code>CTRL+b, c</code>表示按住<code>CTRL</code>键不动，然后按<code>b</code>, 然后松开<code>CTRL</code>和<code>b</code>键。再按下<code>c</code>键</li>
<li><code>CTRL+b, l(ast)</code>表示<code>CTRL+b, l</code>。加单词在这里是怕用户把字母<code>l</code>看成是数字<code>1</code>, 另外可以让大家更加容易记住快捷键的意义。</li>
</ul>


<h3>环境</h3>

<p>Ubuntu 14.04</p>

<p>tmux用的是默认配置, 没有做任何修改。也就说tmux的快捷键是<code>CTRL+b</code></p>

<h2>基本用法</h2>

<p>在Ubuntu下面可以用快捷键<code>CTRL+ALT+t</code>打开一个terminal</p>

<p>如果没有安装tmux的话可以运行<code>sudo apt-get install tmux</code>来进行安装。</p>

<p>运行<code>tmux</code>命令, 可以看到最底下已经有一条绿色的状态栏，表示终端现在正在一个tmux的session里面。</p>

<h3>创建窗口和pane</h3>

<ul>
<li>按<code>CTRL+b, %</code>在当前窗口水平分屏，创建一个新的pane</li>
<li>按<code>CTRL+b, "</code>在当前窗口垂直分屏，创建一个新的pane</li>
<li>按<code>CTRL+b, c(reate)</code>创建新的窗口</li>
</ul>


<p>现在你的终端应该长的下图一样:
<img src="http://rainyfeeling.github.io/images/tmux_example.png" alt="tmux_example.png" /></p>

<ul>
<li>图片说明:

<ul>
<li><code>[0]</code> 表示session的名称是<code>0</code></li>
<li><code>0:~</code> 表示窗口编号是<code>0</code>, 名称是<code>~</code>，其实就是当前目录</li>
<li><code>1:~*</code>表示窗口编号是<code>1</code>, 名称是<code>~</code>。也就是当前目录名。<code>*</code>表示这个窗口是当前窗口</li>
</ul>
</li>
</ul>


<h3>窗口切换</h3>

<ul>
<li><code>CTRL+b, 数字</code>，数字是窗口的编号，从0开始往后累加。最大只能是9。</li>
<li><code>CTRL+b, n(ext)</code>，表示切换到当前窗口编号+1的窗口。</li>
<li><code>CTRL+b, p(revious)</code>，表示切换到当前窗口编号-1的窗口。</li>
<li><code>CTRL+b, l(ast)</code>，表示切换到上一次(last)切换的窗口。</li>
</ul>


<h3>pane的切换</h3>

<ul>
<li><code>CTRL+b, o(ther)</code>, 这里只能是一个pane，一个pane的切换</li>
<li><code>CTRL+b, 箭头</code>，这时可以上下左右的切换。</li>
</ul>


<h3>退出窗口或者pane</h3>

<p>在tmux的窗口或者命令行，输入<code>exit</code>命令就可以退出当前窗口或者pane。</p>

<h3>历史记录浏览</h3>

<p>如果在窗口或者pane里，想往上翻页查询历史记录，那应该怎么办呢？</p>

<ul>
<li>这时我们需要进入复制模式

<ul>
<li>按<code>CTRL+b, [</code>进入复制模式。可以看到右上角显示一个黄色高亮块，表示当前正在复制模式。</li>
<li>按<code>PAGE-UP</code> <code>PAGE-DOWN</code>和上下左右箭头进行浏览</li>
<li>按两次<code>ESC</code>键退出复制模式, 恢复正常模式。(默认使用Emacs的按键方案)

<ul>
<li>如果使用vi按键方案，在复制模式下，只要按回车键就可以退出复制模式。(下面讲解怎么配置成vi按键方案)</li>
</ul>
</li>
</ul>
</li>
</ul>


<p><p /></p>

<ul>
<li>如果你习惯用vi的话，我们可以把复制模式里面的按键配置成vi样式

<ul>
<li>打开<code>~/.tmux.conf</code>文件，如果没有的话就直接创建。</li>
<li>加入代码
<code>
set-window-option -g mode-keys vi
</code></li>
<li>配置完成之后，需要退出tmux</li>
<li>这样配置以后, 退出复制模式的快捷键变成了回车键。</li>
<li>而且你可以在复制模式用<code>h</code>, <code>i</code>, <code>j</code>, <code>k</code>进行翻页，还可以用<code>G</code>, <code>gg</code>等等进行浏览。</li>
</ul>
</li>
</ul>


<p>至此，你已经学会基本的tmux功能，这样可以帮助你在命令行下面更加高效。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Tips]]></title>
    <link href="http://rainyfeeling.github.io/blog/2017/05/30/octopress-tips/"/>
    <updated>2017-05-30T10:34:53+08:00</updated>
    <id>http://rainyfeeling.github.io/blog/2017/05/30/octopress-tips</id>
    <content type="html"><![CDATA[<h2>写博客的基本流程</h2>

<p>首先运行octopress里面的<code>rake preview</code>和<code>rake watch</code>。查看log运行正常，下面的log就表示运行正常:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>➜  octopress rake watch
</span><span class='line'>Starting to watch <span class="nb">source </span>with Jekyll and Compass.
</span><span class='line'>
</span><span class='line'>&gt;&gt;&gt; Compass is watching <span class="k">for</span> changes. Press Ctrl-C to Stop.
</span><span class='line'>
</span><span class='line'>Configuration file: /home/josh/work/blogger/octopress/_config.yml
</span><span class='line'>            Source: <span class="nb">source</span>
</span><span class='line'><span class="nb">       </span>Destination: public
</span><span class='line'>      Generating...
</span><span class='line'>                    <span class="k">done</span>.
</span><span class='line'> Auto-regeneration: enabled <span class="k">for</span> <span class="s1">&#39;source&#39;</span>
</span><span class='line'>    write public/stylesheets/screen.css
</span><span class='line'>      Regenerating: <span class="m">1</span> file<span class="o">(</span>s<span class="o">)</span> changed at 2017-06-11 10:20:43 ...done in 0.44646012 seconds.
</span></code></pre></td></tr></table></div></figure>


<p>然后用浏览器打开<code>localhost:4000</code>，按<code>F5</code>刷新查看效果</p>

<p>现在可以用文本编辑器打开source目录下面的markdown文章开始编辑</p>

<p>编辑文章存盘的时候，一定要确认<code>rake watch</code>那边的log里出现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Regenerating: <span class="m">1</span> file<span class="o">(</span>s<span class="o">)</span> changed at 2017-06-11 10:20:43 ...done in 0.44646012 seconds.
</span></code></pre></td></tr></table></div></figure>


<p>如果没有出现上面的log则表示octopress发现你的文章里面有错误，所以没有生成出新的博客。比如下面的例子表示出错:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   Error: Pygments can<span class="err">&#39;</span>t parse unknown language: &lt;/p&gt;.
</span><span class='line'>   Error: Run jekyll build --trace <span class="k">for</span> more information.
</span></code></pre></td></tr></table></div></figure>


<p>这个时候你需要重新编辑你的文章，修复错误。</p>

<h2>用jquery的镜像地址来提高网站访问速度</h2>

<p>因为原始地址是google的，所以中国这边完全访问不了，所以直接替换成比较快的镜像</p>

<p>打开octopress的根目录，编辑<code>source/_includes/head.html</code>，找到下面的代码行，将jquery的地址替换成code.jquery.com的地址:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gd">-  &lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="gi">+  &lt;script src=&quot;//code.jquery.com/jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>关闭tweet插件</h2>

<p>编辑配置文件<code>_config.yml</code>，将twitter_tweet_button的配置改成<code>false</code></p>

<h2>关于markdown格式的文档:</h2>

<ul>
<li><a href="https://help.github.com/articles/basic-writing-and-formatting-syntax/">https://help.github.com/articles/basic-writing-and-formatting-syntax/</a></li>
<li><a href="https://guides.github.com/features/mastering-markdown/">https://guides.github.com/features/mastering-markdown/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 14.04上安装Octopress]]></title>
    <link href="http://rainyfeeling.github.io/blog/2017/05/28/ubuntu-14-dot-04shang-an-zhuang-octopress/"/>
    <updated>2017-05-28T22:47:29+08:00</updated>
    <id>http://rainyfeeling.github.io/blog/2017/05/28/ubuntu-14-dot-04shang-an-zhuang-octopress</id>
    <content type="html"><![CDATA[<h2>1. 介绍</h2>

<p>octopress是基于Jekyll的静态博客系统。他有几个好处:</p>

<ul>
<li><p>兼容github page, 不用再申请博客空间了。直接用github的repository就可以。博客的结尾是<code>用户名.github.io</code></p></li>
<li><p>用户只需要编写markdown格式的文章，然后通过octopress生成网站内容</p></li>
<li>一条命令直接推送到github，简单方便。</li>
<li>通过git进行版本管理，不用担心内容丢失。</li>
</ul>


<!--more-->


<h3>基本知识</h3>

<ul>
<li><code>git</code> - 文件版本管理工具

<ul>
<li><code>git remote</code>: 远程服务器的别名</li>
<li>跟服务器的交互只有fetch, pull和push命令</li>
<li>平时都是在本地分支上面, checkout命令才会改变本地工作目录的文件内容</li>
</ul>
</li>
</ul>


<p><code>ruby</code>: 编程语言，octopress是用ruby开发的</p>

<p><code>gem</code>: 是ruby的一个库或者是应用。可以用gem命令来安装管理。安装完之后在命令行就直接可以运行了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 通过gem命令安装一个应用:bundle</span>
</span><span class='line'><span class="nv">$ </span>gem install bundle  <span class="c"># 有时候需要sudo</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 安装完成后就可以直接执行bundle</span>
</span><span class='line'><span class="nv">$ </span>bundle --version
</span><span class='line'>Bundler version 1.15.0
</span></code></pre></td></tr></table></div></figure>


<p><code>bundle</code>: 基于gem的更加强大的包管理工具，可以安装批量的gem, 解决gem之间的依赖关系，而且还可以指定要安装的gem版本</p>

<p><code>Gemfile</code>: Gemfile里面包括批量的gem, 而且可以指定依赖关系和版本要求。
    <code>bundle install</code>读取当前目录的Gemfile来安装里面指定的gems</p>

<p><code>rake</code>: 一个ruby应用，通过gem可以安装，是ruby in rail里的组件。可以理解成linux里面的make</p>

<p><code>rakefile</code>: 很像makefile，指定rake执行的任务</p>

<h3>参考</h3>

<p>官方文档: <a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a>
虽然文档已经有些老了，但是过程还是简单明了的。</p>

<h2>2. 安装Octopress</h2>

<h3>环境</h3>

<p>Ubuntu 14.04</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>➜  octopress lsb_release -a
</span><span class='line'>No LSB modules are available.
</span><span class='line'>Distributor ID: Ubuntu
</span><span class='line'>Description:    Ubuntu 14.04.5 LTS
</span><span class='line'>Release:        14.04
</span><span class='line'>Codename:       trusty
</span></code></pre></td></tr></table></div></figure>


<p>ruby版本1.9.3</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>➜  octopress ruby --version
</span><span class='line'>ruby 1.9.3p484 <span class="o">(</span>2013-11-22 revision 43786<span class="o">)</span> <span class="o">[</span>x86_64-linux<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>步骤</h3>

<p>首先下载Octopress的源码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>➜  git clone git://github.com/imathis/octopress.git
</span><span class='line'>➜  <span class="nb">cd </span>octopress
</span><span class='line'>
</span><span class='line'><span class="c"># 列出目录下所有文件</span>
</span><span class='line'>➜  ls
</span><span class='line'>CHANGELOG.markdown  config.rb  config.ru  _config.yml  Gemfile  plugins  Rakefile  README.markdown
</span></code></pre></td></tr></table></div></figure>


<p>目录下面有Gemfile，里面列出了Octopress需要安装的gem。需要用bundle安装</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 安装bundle, 如果已经安装了就可以略过这一步</span>
</span><span class='line'>➜  gem install bundle
</span><span class='line'>
</span><span class='line'><span class="c"># 根据Gemfile来安装相应的依赖。</span>
</span><span class='line'>➜  bundle install
</span><span class='line'>
</span><span class='line'><span class="c"># NOTE: 我遇到了有一个插件要求ruby 2.0.0，但是我的版本是1.9.3。但是重新运行了几次就成功了？！</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3. 配置Octopress</h2>

<p>运行rake命令安装默认的theme</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 生成sass目录和source目录</span>
</span><span class='line'>➜  rake install
</span></code></pre></td></tr></table></div></figure>


<p>设置github pages</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>➜  rake setup_github_pages
</span><span class='line'><span class="c"># 需要输入你的github.io的URL, 比如我的就是https://github.com/rainyfeeling/rainyfeeling.github.io</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 成功之后会在目录下面生成一个_deploy目录，这个文件夹就静态网站的所有内容。现在里面就一个简单字符串</span>
</span></code></pre></td></tr></table></div></figure>


<p>编辑<code>_config.yml</code>来更改博客的基本信息，像标题等等</p>

<h2>4. 写博客文章</h2>

<p>新建标题文章, 注意在zsh里面，所以<code>[</code>, <code>]</code>字符前面要加转义符<code>\</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake new_post<span class="se">\[</span><span class="s2">&quot;Ubuntu 14.04上安装octopress&quot;</span><span class="se">\]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 在 _source/_posts目录下生成了一个 .markdown 文件</span>
</span></code></pre></td></tr></table></div></figure>


<p>用markdown编辑器修改文章，直到文章差不多完成，这时可以开始生成网站内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Generates posts and pages into the public directory</span>
</span><span class='line'>rake generate
</span><span class='line'>
</span><span class='line'><span class="c"># 运行一个本地server，便于调试</span>
</span><span class='line'>rake preview    <span class="c"># Watches, and mounts a webserver at </span>
</span></code></pre></td></tr></table></div></figure>


<p>打开浏览器，在地址栏里面输入<a href="http://localhost:4000">http://localhost:4000</a> 就可以看到网站的内容了</p>

<p>检查文章，标题还有各种配置是否正确，如果不正确的话可以继续修改markdown文件，然后用<code>rake generate</code>重新生成网站。同时刷新一下<code>http://localhost:4000</code>就可以看到效果了。</p>

<h2>5. 部署到github pages</h2>

<p>只需要运行<code>rake deploy</code>，然后输入github repo的用户名和密码，就直接将生成的网站内容推送到github网站了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重新开始]]></title>
    <link href="http://rainyfeeling.github.io/blog/2015/02/02/start-again/"/>
    <updated>2015-02-02T22:23:57+08:00</updated>
    <id>http://rainyfeeling.github.io/blog/2015/02/02/start-again</id>
    <content type="html"><![CDATA[<p>这个博客又放了很久没更新了，好吧。终于今天又更新了</p>

<p>先总结一下2014年里做的事情:</p>

<ul>
<li><p>体育锻炼</p>

<ul>
<li>俯卧撑没有继续做了。</li>
<li>羽毛球训练的时候把左脚给伤了，左边膝盖后面的筋有点问题，伸直然后屈伸的时候会有一声响。
从2014.03月起就没有再打了。过了将近一年，还是没怎么好。前几天打了一次，又严重了。</li>
<li>开始学羽毛球的时候也开始游泳，这一年学会了蛙泳和自由泳</li>
</ul>
</li>
<li><p>2015计划</p>

<ul>
<li>膝盖恢复</li>
<li>写文章</li>
<li>学英语</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[羽毛球训练第一阶段总结]]></title>
    <link href="http://rainyfeeling.github.io/blog/2013/11/27/yu-mao-qiu-xun-lian-di-%5B%3F%5D-jie-duan-zong-jie/"/>
    <updated>2013-11-27T22:28:54+08:00</updated>
    <id>http://rainyfeeling.github.io/blog/2013/11/27/yu-mao-qiu-xun-lian-di-[?]-jie-duan-zong-jie</id>
    <content type="html"><![CDATA[<p>参加羽毛球训练有将近10次了,总体还是有进步的。</p>

<p><em>训练的内容有:</em></p>

<ul>
<li>高远球</li>
<li>接杀</li>
<li>杀球</li>
<li>4, 6点接球</li>
<li>杀球上网扑杀</li>
<li>网前小球扑杀</li>
<li>交叉步接后场边线球</li>
</ul>


<p><em>心得记录如下:</em></p>

<ul>
<li>高远球：纠正了握拍姿势。在击球时，不是像握拳一样握拍。
应该是大拇指和最下面三指握紧，食指在最上面做勾状，参照李在福教学视频里面。
在接球时一定要压到对手底线，最好是靠着左右边线。</li>
<li>杀球：杀球点在前上方，所以要求比打高远球时提前出手。
在跳杀时，应该是向正上方跳起然后杀球。
杀球时要看球网。杀球时用余光看到对手位置，然后杀两边边线。</li>
<li>接杀：重心较低，站位稍靠后。手要伸出去，这样能够够到很远的地方。
在对手击球时，做一个小跳步。然后向左右两边接球。
最忌讳提前出手，容易出现判断失误。所以只时在对手击球时做跳步，然后通过来球的方向判断左右。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World From Octopress]]></title>
    <link href="http://rainyfeeling.github.io/blog/2013/11/25/hello-world-from-octopress/"/>
    <updated>2013-11-25T21:19:57+08:00</updated>
    <id>http://rainyfeeling.github.io/blog/2013/11/25/hello-world-from-octopress</id>
    <content type="html"><![CDATA[<p>花了一个晚上的时间，终于把这个博客给搭建起来了。效果还是挺满意的。这个计划N久了的事情终于开始了，看来有Macbook就要开始折腾了。</p>

<p>整个过程没有想像的难，像有句话说的:&ldquo;只要开始动手，就已经成功一半"。
我是对照着Octopress的Getting start慢慢的看，然后一步一步的试，外加一点耐心。基本就搞定了。
整个过程中最慢的部分竟然是安装Octopress，此过程会安装很多ruby gem，经常会连接网站超时。
不过其他都还好。</p>

<p>Octopress是一个建立网站的框架。它可以完成配置，生成，预览网站。
部署的话需要一个外部的网站，比较简单就是像我一样，直接用github.io来部署。</p>

<p>总结一下，整个流程就是：</p>

<pre><code>1. 安装好Octopress (git, ruby, rake)
2. 建立一个github.io的repository来存放网站
3. 配置octopress，生成page, post.
4. 用rake来生成，预览网页。
5. 发布到github.io - 也就是push到github网站
6. 把octopress的配置也commit到本地git
</code></pre>

<p>接下来的事情是要：</p>

<pre><code>* 安装代码显示的插件
* 做几张好看的图片
* 熟悉Markdown的语法格式
* 多写写博客
</code></pre>
]]></content>
  </entry>
  
</feed>
